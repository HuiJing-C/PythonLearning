# Python的hashlib提供了常见的摘要算法，如MD5，SHA1等等。
# 什么是摘要算法呢？摘要算法又称哈希算法、散列算法。它通过一个函数，把任意长度的数据转换为一个长度固定的数据串（通常用16进制的字符串表示）。
import hashlib

if __name__ == '__main__':
    # MD5是最常见的摘要算法，速度很快，生成结果是固定的128 bit字节，通常用一个32位的16进制字符串表示。
    md5 = hashlib.md5()
    md5.update('CJH nb'.encode('utf-8'))
    print(md5.hexdigest())  # f61815d67865c7f02f69ea57d320af55
    # 如果数据量很大，可以分块多次调用update()，最后计算的结果是一样的
    md5_2 = hashlib.md5()
    md5_2.update("CJH".encode('utf-8'))
    md5_2.update(" nb".encode('utf-8'))
    print(md5_2.hexdigest())  # f61815d67865c7f02f69ea57d320af55
    # 另一种常见的摘要算法是SHA1，调用SHA1和调用MD5完全类似
    # SHA1的结果是160 bit字节，通常用一个40位的16进制字符串表示。
    # 比SHA1更安全的算法是SHA256和SHA512，不过越安全的算法不仅越慢，而且摘要长度更长。

    # 有没有可能两个不同的数据通过某个摘要算法得到了相同的摘要？完全有可能，因为任何摘要算法都是把无限多的数据集合映射到一个有限的集合中。这种情况称为碰撞
    # 这种情况也并非不可能出现，但是非常非常困难。

    # >>>> 应用 <<<<
    # 存储密码，用户输入明文，存储明文的md5
    # 提高：黑客可以用常用的字符串的md5值反推密码，我们可以给密码添加一个复杂的字符串，然后再计算md5，俗称"加盐"
    # 这样只要黑客不知道该字符串，就很难推出密码明文
